---
meta:
  <<: (( merge ))
  release_version: (( merge || "latest" ))

# PROPERTIES
properties:
  <<: (( merge ))
  broker: (( .meta.broker ))
  cf: (( .meta.cf ))
  syslog_aggregator: (( .meta.syslog_aggregator ))
  redis:
    broker:
      <<: (( merge ))
      auth:
        username: (( .meta.broker.username ))
        password: (( .meta.broker.password ))
      enable_service_access: true
      service_name: (( .meta.service_name ))
      service_id: (( .meta.redis.broker.service_id ))
      shared_vm_plan_id: (( .meta.redis.broker.shared_vm_plan_id ))
      dedicated_vm_plan_id: (( .meta.redis.broker.dedicated_vm_plan_id ))
      route_name: (( .meta.route_name ))
      network: redis_z1
      backend_host: (( base_jobs.cf-redis-broker.networks.redis_z1.static_ips.[0] ))
      host: (( base_jobs.cf-redis-broker.networks.redis_z1.static_ips.[0] ))
      backend_port: 12345
      subdomain: (( .meta.redis.broker.subdomain || "redis-broker" ))
      name: (( .meta.redis.broker.name ))
      service_instance_limit: (( .meta.redis.shared_plan.instance_limit ))
      dedicated_nodes: (( base_jobs.dedicated-node.networks.redis_z1.static_ips ))
      shared_min_port: (( .meta.redis.broker.shared_min_port ))
      shared_max_port: (( .meta.redis.broker.shared_max_port ))
    maxmemory: (( .meta.redis.shared_plan.max_memory ))
    host: (( base_jobs.cf-redis-broker.networks.redis_z1.static_ips.[0] ))
    config_command: (( .meta.redis.config_command ))
    save_command: (( .meta.redis.save_command ))
    bg_save_command: (( .meta.redis.bg_save_command ))
    agent:
      backend_port: 54321

resource_pools: ~
networks: ~

# RELEASES
base_releases:
- name: (( .meta.release_name ))
  version: (( .meta.release_version ))
- name: routing
  version: 0.143.0

additional_releases: (( merge || [] ))

releases: (( base_releases additional_releases ))


# JOBS
job_templates:
  cf_redis_broker:
  - name: cf-redis-broker
    release: (( .meta.release_name ))
  - name: route_registrar
    release: routing
  - name: syslog-configurator
    release: (( .meta.release_name ))
  dedicated_node:
  - name: dedicated-node
    release: (( .meta.release_name ))
  - name: syslog-configurator
    release: (( .meta.release_name ))
  broker_registrar:
  - name: broker-registrar
    release: (( .meta.release_name ))
  broker_deregistrar:
  - name: broker-deregistrar
    release: (( .meta.release_name ))
  smoke_tests:
  - name: smoke-tests
    release: (( .meta.release_name ))

additional_job_templates:
  cf_redis_broker: (( merge || [] ))
  dedicated_node: (( merge || [] ))
  broker_registrar: (( merge || [] ))
  broker_deregistrar: (( merge || [] ))
  smoke_tests: (( merge || [] ))

additional_job_properties:
  cf_redis_broker: (( merge || [] ))
  dedicated_node: (( merge || [] ))
  broker_registrar: (( merge || [] ))
  broker_deregistrar: (( merge || [] ))
  smoke_tests: (( merge || [] ))

additional_jobs: (( merge || [] ))

base_jobs:
- instances: 1
  name: cf-redis-broker
  networks:
  - name: redis_z1
    static_ips: (( merge || static_ips(0) ))
  persistent_disk: (( .meta.redis.shared_plan.persistent_disk_size || 4096 ))
  resource_pool: (( .resource_pools.[0].name ))
  templates: (( job_templates.cf_redis_broker additional_job_templates.cf_redis_broker ))
  properties:
    nats:
      machines: (( .meta.nats.machines ))
      port: (( .meta.nats.port ))
      password: (( .meta.nats.password ))
      user: (( .meta.nats.user ))
    route_registrar:
      routes:
      - name: "broker_0"
        registration_interval: 10s
        port: 80
        tags:
          component: redis-broker
          env: (( .meta.environment_type || "production" ))
        uris:
        - (( .properties.redis.broker.subdomain "." .properties.cf.system_domain ))
        health_check:
          name: redis-broker
          script_path: /var/vcap/jobs/cf-redis-broker/bin/health_check.sh
    <<: (( merge ))
- instances: (( .meta.redis.dedicated_plan.instance_count ))
  name: dedicated-node
  networks:
  - name: redis_z1
    static_ips: (( merge || static_ips(1,2,3,4,5,6,7,8,9,10) ))
  persistent_disk: (( .meta.redis.dedicated_plan.persistent_disk_size || 4096 ))
  resource_pool: (( .resource_pools.[0].name ))
  templates: (( job_templates.dedicated_node additional_job_templates.dedicated_node ))
  <<: (( merge ))
- instances: 1
  lifecycle: errand
  name: broker-registrar
  networks:
  - name: redis_z1
  properties:
    broker:
      name: (( .properties.redis.broker.name || "redis" ))
      host: (( .properties.redis.broker.route_name "." .meta.apps_domain ))
      username: (( .properties.redis.broker.auth.username ))
      password: (( .properties.redis.broker.auth.password ))
  resource_pool: (( .resource_pools.[0].name ))
  templates: (( job_templates.broker_registrar additional_job_templates.broker_registrar ))
  <<: (( merge ))
- instances: 1
  lifecycle: errand
  name: broker-deregistrar
  networks:
  - name: redis_z1
  properties:
    broker:
      name: (( .properties.redis.broker.name || "redis" ))
      host: (( .properties.redis.broker.route_name "." .meta.apps_domain ))
      username: (( .properties.redis.broker.auth.username ))
      password: (( .properties.redis.broker.auth.password ))
  resource_pool: (( .resource_pools.[0].name ))
  templates: (( job_templates.broker_deregistrar additional_job_templates.broker_deregistrar ))
  <<: (( merge ))
- instances: 1
  lifecycle: errand
  name: smoke-tests
  networks:
  - name: redis_z1
  resource_pool: (( .resource_pools.[0].name ))
  templates: (( job_templates.smoke_tests additional_job_templates.smoke_tests ))
  <<: (( merge ))

jobs: (( base_jobs additional_jobs ))
